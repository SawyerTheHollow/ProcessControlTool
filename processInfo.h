#ifndef PROCESSINFO_H
#define PROCESSINFO_H

#include <string>
#include <vector>

using namespace std;

class processInfo {
private:
    //Из файла Status:
    int Pid;
    string Name;
    string Umask;
    string State;
    string PPid;
    string Tgid;
    string Ngid;
    string TracerPid;
    string Uid;
    string Gid;
    string FDSize;
    string Groups;
    string NStgid;
    string NSpid;
    string NSpgid;
    string NSsid;
    string Kthread;
    string VmPeak;
    string VmSize;
    string VmLck;
    string VmPin;
    string VmHWM;
    string VmRSS;
    string RssAnon;
    string RssFile;
    string RssShmem;
    string VmData;
    string VmStk;
    string VmExe;
    string VmLib;
    string VmPTE;
    string VmSwap;
    string HugetlbPages;
    string CoreDumping;
    string THP_enabled;
    string untag_mask;
    string Threads;
    string SigQ;
    string SigPnd;
    string ShdPnd;
    string SigBlk;
    string SigIgn;
    string SigCgt;
    string CapInh;
    string CapPrm;
    string CapEff;
    string CapBnd;
    string CapAmb;
    string NoNewPrivs;
    string Seccomp;
    string Seccomp_filters;
    string Speculation_Store_Bypass;
    string SpeculationIndirectBranch;
    string Cpus_allowed;
    string Cpus_allowed_list;
    string Mems_allowed;
    string Mems_allowed_list;
    string voluntary_ctxt_switches;
    string nonvoluntary_ctxt_switches;
    string x86_Thread_features;
    string x86_Thread_features_locked;
    //Из файла Stat:
    string pgrp;
    string session;
    string tty_nr;
    string tpgid;
    string flags;
    string minflt;
    string cminflt;
    string majflt;
    string cmajflt;
    string utime;
    string stime;
    string cutime;
    string cstime;
    string priority;
    string nice;
    string num_threads;
    string itrealvalue;
    string starttime;
    string vsize;
    string rss;
    string rsslim;
    string startcode;
    string endcode;
    string startstack;
    string kstkesp;
    string kstkeip;
    string signal;
    string blocked;
    string sigignore;
    string sigcatch;
    string wchan;
    string nswap;
    string cnswap;
    string exit_signal;
    string processor;
    string rt_priority;
    string policy;
    string delayacct_blkio_ticks;
    string guest_time;
    string cguest_time;
    string start_data;
    string end_data;
    string start_brk;
    string arg_start;
    string arg_end;
    string env_start;
    string env_end;
    string exit_code;
public:
    //Из файла Status:
    int getPid();
    string getName();
    string getUmask();
    string getState();
    string getPPid();
    string getTgid();
    string getNgid();
    string getTracerPid();
    string getUid();
    string getGid();
    string getFDSize();
    string getGroups();
    string getNStgid();
    string getNSpid();
    string getNSpgid();
    string getNSsid();
    string getKthread();
    string getVmPeak();
    string getVmSize();
    string getVmLck();
    string getVmPin();
    string getVmHWM();
    string getVmRSS();
    string getRssAnon();
    string getRssFile();
    string getRssShmem();
    string getVmData();
    string getVmStk();
    string getVmExe();
    string getVmLib();
    string getVmPTE();
    string getVmSwap();
    string getHugetlbPages();
    string getCoreDumping();
    string getTHP_enabled();
    string getuntag_mask();
    string getThreads();
    string getSigQ();
    string getSigPnd();
    string getShdPnd();
    string getSigBlk();
    string getSigIgn();
    string getSigCgt();
    string getCapInh();
    string getCapPrm();
    string getCapEff();
    string getCapBnd();
    string getCapAmb();
    string getNoNewPrivs();
    string getSeccomp();
    string getSeccomp_filters();
    string getSpeculation_Store_Bypass();
    string getSpeculationIndirectBranch();
    string getCpus_allowed();
    string getCpus_allowed_list();
    string getMems_allowed();
    string getMems_allowed_list();
    string getvoluntary_ctxt_switches();
    string getnonvoluntary_ctxt_switches();
    string getx86_Thread_features();
    string getx86_Thread_features_locked();
    //Из файла Stat:
    string getpgrp();
    string getsession();
    string gettty_nr();
    string gettpgid();
    string getflags();
    string getminflt();
    string getcminflt();
    string getmajflt();
    string getcmajflt();
    string getutime();
    string getstime();
    string getcutime();
    string getcstime();
    string getpriority();
    string getnice();
    string getnum_threads();
    string getitrealvalue();
    string getstarttime();
    string getvsize();
    string getrss();
    string getrsslim();
    string getstartcode();
    string getendcode();
    string getstartstack();
    string getkstkesp();
    string getkstkeip();
    string getsignal();
    string getblocked();
    string getsigignore();
    string getsigcatch();
    string getwchan();
    string getnswap();
    string getcnswap();
    string getexit_signal();
    string getprocessor();
    string getrt_priority();
    string getpolicy();
    string getdelayacct_blkio_ticks();
    string getguest_time();
    string getcguest_time();
    string getstart_data();
    string getend_data();
    string getstart_brk();
    string getarg_start();
    string getarg_end();
    string getenv_start();
    string getenv_end();
    string getexit_code();
    //Из файла Status:
    void setPid(int Pid);
    void setName(string Name);
    void setUmask(string Umask);
    void setState(string State);
    void setPPid(string PPid);
    void setTgid(string Tgid);
    void setNgid(string Ngid);
    void setTracerPid(string TracerPid);
    void setUid(string Uid);
    void setGid(string Gid);
    void setFDSize(string FDSize);
    void setGroups(string Groups);
    void setNStgid(string NStgid);
    void setNSpid(string NSpid);
    void setNSpgid(string NSpgid);
    void setNSsid(string NSsid);
    void setKthread(string Kthread);
    void setVmPeak(string VmPeak);
    void setVmSize(string VmSize);
    void setVmLck(string VmLck);
    void setVmPin(string VmPin);
    void setVmHWM(string VmHWM);
    void setVmRSS(string VmRSS);
    void setRssAnon(string RssAnon);
    void setRssFile(string RssFile);
    void setRssShmem(string RssShmem);
    void setVmData(string VmData);
    void setVmStk(string VmStk);
    void setVmExe(string VmExe);
    void setVmLib(string VmLib);
    void setVmPTE(string VmPTE);
    void setVmSwap(string VmSwap);
    void setHugetlbPages(string HugetlbPages);
    void setCoreDumping(string CoreDumping);
    void setTHP_enabled(string THP_enabled);
    void setuntag_mask(string untag_mask);
    void setThreads(string Threads);
    void setSigQ(string SigQ);
    void setSigPnd(string SigPnd);
    void setShdPnd(string ShdPnd);
    void setSigBlk(string SigBlk);
    void setSigIgn(string SigIgn);
    void setSigCgt(string SigCgt);
    void setCapInh(string CapInh);
    void setCapPrm(string CapPrm);
    void setCapEff(string CapEff);
    void setCapBnd(string CapBnd);
    void setCapAmb(string CapAmb);
    void setNoNewPrivs(string NoNewPrivs);
    void setSeccomp(string Seccomp);
    void setSeccomp_filters(string Seccomp_filters);
    void setSpeculation_Store_Bypass(string Speculation_Store_Bypass);
    void setSpeculationIndirectBranch(string SpeculationIndirectBranch);
    void setCpus_allowed(string Cpus_allowed);
    void setCpus_allowed_list(string Cpus_allowed_list);
    void setMems_allowed(string Mems_allowed);
    void setMems_allowed_list(string Mems_allowed_list);
    void setvoluntary_ctxt_switches(string voluntary_ctxt_switches);
    void setnonvoluntary_ctxt_switches(string nonvoluntary_ctxt_switches);
    void setx86_Thread_features(string x86_Thread_features);
    void setx86_Thread_features_locked(string x86_Thread_features_locked);
    //Из файла Stat:
    void setpgrp(string pgrp);
    void setsession(string session);
    void settty_nr(string tty_nr);
    void settpgid(string tpgid);
    void setflags(string flags);
    void setminflt(string minflt);
    void setcminflt(string cminflt);
    void setmajflt(string majflt);
    void setcmajflt(string cmajflt);
    void setutime(string utime);
    void setstime(string stime);
    void setcutime(string cutime);
    void setcstime(string cstime);
    void setpriority(string priority);
    void setnice(string nice);
    void setnum_threads(string num_threads);
    void setitrealvalue(string itrealvalue);
    void setstarttime(string starttime);
    void setvsize(string vsize);
    void setrss(string rss);
    void setrsslim(string rsslim);
    void setstartcode(string startcode);
    void setendcode(string endcode);
    void setstartstack(string startstack);
    void setkstkesp(string kstkesp);
    void setkstkeip(string kstkeip);
    void setsignal(string signal);
    void setblocked(string blocked);
    void setsigignore(string sigignore);
    void setsigcatch(string sigcatch);
    void setwchan(string wchan);
    void setnswap(string nswap);
    void setcnswap(string cnswap);
    void setexit_signal(string exit_signal);
    void setprocessor(string processor);
    void setrt_priority(string rt_priority);
    void setpolicy(string policy);
    void setdelayacct_blkio_ticks(string delayacct_blkio_ticks);
    void setguest_time(string guest_time);
    void setcguest_time(string cguest_time);
    void setstart_data(string start_data);
    void setend_data(string end_data);
    void setstart_brk(string start_brk);
    void setarg_start(string arg_start);
    void setarg_end(string arg_end);
    void setenv_start(string env_start);
    void setenv_end(string env_end);
    void setexit_code(string exit_code);
};

vector<processInfo> getVectorOfProcesses();


#endif // PROCESSINFO_H
